package controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import model.*;

public class Viajes {

    Map<String, Pais> paises;

    public Viajes() {
    	
    }

    public void addPais(Pais pais) {
        if (!paises.containsKey(pais.getNombre())) {
            paises.put(pais.getNombre(), pais);
        }
    }
	public static boolean addCiudad(){
		
	}
	
	public static boolean addLugar(){
		
	}
	
	public static List<Ciudad> getCiudades(){

    public void addCiudad(String pais_nombre, Ciudad ciudad) {
        if (paises.containsKey(pais_nombre)) {
            paises.get(pais_nombre).ciudades.add(ciudad);
        }
    }

    public void addLugar(String pais_nombre, String ciudad_nombre, Lugar lugar) {
        if (pais.containsKey(pais_nombre)) {
            Pais pais = paises.get(pais_nombre);
            for (Ciudad ciudad : pais.ciudades) {
                if (ciudad.nombre.equals(ciudad_nombre)) {
                    ciudad.lugares.add(lugar);
                    break;
                }
            }
        }
    }

    public List<String> getCiudades(String pais_nombre);

    public class App {

        private Map<String, Pais> paises;

        public App() {
            this.paises = new HashMap<>();
        }

        public void addPais(Pais pais) {
            if (!this.paises.containsKey(pais.getNombre())) {
                this.paises.put(pais.getNombre(), pais);
            }
        }

        public void addCiudad(String paisNombre, Ciudad ciudad) {
            if (this.paises.containsKey(paisNombre)) {
                this.paises.get(paisNombre).getCiudades().add(ciudad);
            }
        }

        public void addLugar(String paisNombre, String ciudadNombre, Lugar lugar) {
            if (this.paises.containsKey(paisNombre)) {
                Pais pais = this.paises.get(paisNombre);
                for (Ciudad ciudad : pais.getCiudades()) {
                    if (ciudad.getNombre().equals(ciudadNombre)) {
                        ciudad.getLugares().add(lugar);
                        break;
                    }
                }
            }
        }

        public List<String> getCiudades(String paisNombre) {
            List<String> ciudades = new ArrayList<>();
            if (this.paises.containsKey(paisNombre)) {
                for (Ciudad ciudad : this.paises.get(paisNombre).getCiudades()) {
                    ciudades.add(ciudad.getNombre());
                }
            }
            return ciudades;
        }

        public List<String> getLugares(String ciudadNombre) {
            List<String> lugares = new ArrayList<>();
            for (Pais pais : this.paises.values()) {
                for (Ciudad ciudad : pais.getCiudades()) {
                    if (ciudad.getNombre().equals(ciudadNombre)) {
                        for (Lugar lugar : ciudad.getLugares()) {
                            lugares.add(lugar.getNombre());
                        }
                        break;
                    }
                }
            }
            lugares.sort(String::compareToIgnoreCase);
            return lugares;
        }

        public String getUbicacion(String lugarNombre) {
            for (Pais pais : this.paises.values()) {
                for (Ciudad ciudad : pais.getCiudades()) {
                    for (Lugar lugar : ciudad.getLugares()) {
                        if (lugar.getNombre().equals(lugarNombre)) {
                            return ciudad.getNombre() + " (" + pais.getNombre() + ")";
                        }
                    }
                }
            }
            return "";
        }

        public List<Ciudad> getCiudadesConHabitantes(String paisNombre, int habitantes) {
            List<Ciudad> ciudades = new ArrayList<>();
            if (this.paises.containsKey(paisNombre)) {
                for (Ciudad ciudad : this.paises.get(paisNombre).getCiudades()) {
                    if (ciudad.getHabitantes() < habitantes) {
                        ciudades.add(ciudad);
                    }
                }
                ciudades.sort((c1, c2) -> Integer.compare(c1.getHabitantes(), c2.getHabitantes()));
            }
            return ciudades;
        }
    }
    
